/**
 * Script de prueba para verificar el sistema de recuperaci√≥n de contrase√±a
 * Prueba con el usuario daniel1822@gmail.com
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001/api';

// Configuraci√≥n de axios
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Funci√≥n para probar el env√≠o de c√≥digo de recuperaci√≥n
async function probarEnvioCodigo(email) {
  console.log(`\nüîç Probando env√≠o de c√≥digo de recuperaci√≥n para: ${email}`);
  
  try {
    const response = await api.post('/auth/recuperar', {
      email: email
    });
    
    console.log('‚úÖ Respuesta del servidor:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Error al enviar c√≥digo:', error.response?.data || error.message);
    return false;
  }
}

// Funci√≥n para probar la verificaci√≥n del c√≥digo (simulada)
async function probarVerificacionCodigo(email, codigo, nuevaPassword) {
  console.log(`\nüîç Probando verificaci√≥n de c√≥digo para: ${email}`);
  console.log(`üìù C√≥digo: ${codigo}`);
  console.log(`üîë Nueva contrase√±a: ${nuevaPassword}`);
  
  try {
    const response = await api.post('/auth/verificar-codigo', {
      email: email,
      codigo: codigo,
      password: nuevaPassword
    });
    
    console.log('‚úÖ Respuesta del servidor:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Error al verificar c√≥digo:', error.response?.data || error.message);
    return false;
  }
}

// Funci√≥n para probar login con la nueva contrase√±a
async function probarLogin(email, password) {
  console.log(`\nüîç Probando login con nueva contrase√±a para: ${email}`);
  
  try {
    const response = await api.post('/auth/login', {
      email: email,
      password: password
    });
    
    console.log('‚úÖ Login exitoso:', {
      message: response.data.message,
      usuario: response.data.usuario
    });
    return true;
  } catch (error) {
    console.error('‚ùå Error en login:', error.response?.data || error.message);
    return false;
  }
}

// Funci√≥n principal de prueba
async function ejecutarPruebas() {
  console.log('üöÄ Iniciando pruebas de recuperaci√≥n de contrase√±a');
  console.log('=' .repeat(60));
  
  const email = 'daniel1822@gmail.com';
  const nuevaPassword = 'nuevaPassword123';
  
  // Paso 1: Enviar c√≥digo de recuperaci√≥n
  console.log('\nüìß PASO 1: Enviar c√≥digo de recuperaci√≥n');
  const envioExitoso = await probarEnvioCodigo(email);
  
  if (!envioExitoso) {
    console.log('‚ùå No se pudo enviar el c√≥digo. Deteniendo pruebas.');
    return;
  }
  
  // Paso 2: Simular verificaci√≥n (necesitar√≠as el c√≥digo real del email)
  console.log('\nüîê PASO 2: Verificaci√≥n de c√≥digo (simulada)');
  console.log('‚ö†Ô∏è  NOTA: Para probar completamente, necesitas:');
  console.log('   1. Revisar los logs del servidor para obtener el c√≥digo');
  console.log('   2. O configurar el env√≠o de emails reales');
  console.log('   3. O revisar la base de datos para obtener el c√≥digo');
  
  // Simular con un c√≥digo de prueba
  const codigoSimulado = '123456';
  const verificacionExitoso = await probarVerificacionCodigo(email, codigoSimulado, nuevaPassword);
  
  if (verificacionExitoso) {
    // Paso 3: Probar login con nueva contrase√±a
    console.log('\nüîë PASO 3: Probar login con nueva contrase√±a');
    await probarLogin(email, nuevaPassword);
  }
  
  console.log('\n' + '=' .repeat(60));
  console.log('‚úÖ Pruebas completadas');
}

// Funci√≥n para verificar el estado del usuario en la base de datos
async function verificarEstadoUsuario(email) {
  console.log(`\nüîç Verificando estado del usuario: ${email}`);
  
  try {
    // Intentar login con contrase√±a actual para verificar que el usuario existe
    const response = await api.post('/auth/login', {
      email: email,
      password: 'fran0404' // Contrase√±a actual conocida
    });
    
    console.log('‚úÖ Usuario encontrado y activo:', response.data.usuario);
    return true;
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚ö†Ô∏è  Usuario existe pero contrase√±a incorrecta o cuenta inactiva');
      console.log('üìù Detalles:', error.response.data);
    } else {
      console.error('‚ùå Error al verificar usuario:', error.response?.data || error.message);
    }
    return false;
  }
}

// Ejecutar las pruebas
if (require.main === module) {
  ejecutarPruebas().catch(console.error);
}

module.exports = {
  probarEnvioCodigo,
  probarVerificacionCodigo,
  probarLogin,
  verificarEstadoUsuario
};
