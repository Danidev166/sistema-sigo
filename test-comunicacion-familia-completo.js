// Script de prueba completo para el sistema de comunicaci√≥n familiar
const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

// Datos de prueba
const testData = {
  id_estudiante: 1, // Cambiar por un ID real de estudiante
  fecha_comunicacion: new Date().toISOString().split('T')[0],
  tipo_comunicacion: 'Citaci√≥n a Reuni√≥n',
  medio: 'Email',
  asunto: 'Citaci√≥n a reuni√≥n de seguimiento acad√©mico',
  contenido: 'Estimado apoderado, solicitamos su presencia para una reuni√≥n de seguimiento acad√©mico de su pupilo/a.',
  responsable_id: 3, // ID del usuario responsable (Daniel)
  hora_reunion: '14:30',
  lugar_reunion: 'Sala de reuniones - Liceo T√©cnico SIGO',
  enviar_email: false, // Desactivar env√≠o de email para la prueba
  estado: 'Enviado'
};

// Credenciales de prueba (necesitar√°s cambiarlas por credenciales reales)
const credentials = {
  email: 'daniel1822@gmail.com', // Email del usuario
  password: 'fran0404'           // Contrase√±a del usuario
};

let authToken = '';

async function login() {
  try {
    console.log('üîê Iniciando sesi√≥n...');
    const response = await axios.post(`${BASE_URL}/auth/login`, credentials);
    
    console.log('üìã Respuesta del servidor:', JSON.stringify(response.data, null, 2));
    
    if (response.data.accessToken) {
      authToken = response.data.accessToken;
      console.log('‚úÖ Login exitoso');
      return true;
    } else if (response.data.token) {
      authToken = response.data.token;
      console.log('‚úÖ Login exitoso (token)');
      return true;
    } else {
      console.log('‚ùå No se recibi√≥ token de acceso');
      console.log('üìã Estructura de respuesta:', Object.keys(response.data));
      return false;
    }
  } catch (error) {
    console.error('‚ùå Error en login:', error.response?.data || error.message);
    return false;
  }
}

async function testComunicacionFamilia() {
  console.log('üß™ Iniciando pruebas del sistema de comunicaci√≥n familiar...\n');

  // Configurar axios para incluir el token en todas las peticiones
  const api = axios.create({
    baseURL: BASE_URL,
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    }
  });

  try {
    // 1. Probar obtener todas las comunicaciones
    console.log('1Ô∏è‚É£ Probando obtener todas las comunicaciones...');
    const getAllResponse = await api.get('/comunicacion-familia');
    console.log(`‚úÖ Comunicaciones obtenidas: ${getAllResponse.data.length}`);
    if (getAllResponse.data.length > 0) {
      console.log('üìä Primera comunicaci√≥n:', {
        id: getAllResponse.data[0].id,
        asunto: getAllResponse.data[0].asunto,
        tipo: getAllResponse.data[0].tipo_comunicacion,
        fecha: getAllResponse.data[0].fecha_comunicacion
      });
    }

    // 2. Probar obtener comunicaciones por estudiante
    console.log('\n2Ô∏è‚É£ Probando obtener comunicaciones por estudiante...');
    const getByStudentResponse = await api.get(`/comunicacion-familia?id_estudiante=${testData.id_estudiante}`);
    console.log(`‚úÖ Comunicaciones del estudiante ${testData.id_estudiante}: ${getByStudentResponse.data.length}`);

    // 3. Probar crear nueva comunicaci√≥n
    console.log('\n3Ô∏è‚É£ Probando crear nueva comunicaci√≥n...');
    const createResponse = await api.post('/comunicacion-familia', testData);
    console.log('‚úÖ Comunicaci√≥n creada:', createResponse.data.message);
    
    const nuevaComunicacion = createResponse.data.comunicacion;
    console.log('üìù ID de la comunicaci√≥n:', nuevaComunicacion.id);
    console.log('üìù Datos de la comunicaci√≥n:', {
      asunto: nuevaComunicacion.asunto,
      tipo: nuevaComunicacion.tipo_comunicacion,
      medio: nuevaComunicacion.medio,
      estado: nuevaComunicacion.estado
    });

    // 4. Probar obtener comunicaci√≥n por ID
    console.log('\n4Ô∏è‚É£ Probando obtener comunicaci√≥n por ID...');
    const getByIdResponse = await api.get(`/comunicacion-familia/${nuevaComunicacion.id}`);
    console.log('‚úÖ Comunicaci√≥n obtenida:', getByIdResponse.data.asunto);

    // 5. Probar actualizar comunicaci√≥n
    console.log('\n5Ô∏è‚É£ Probando actualizar comunicaci√≥n...');
    const updateData = {
      ...testData,
      asunto: 'Citaci√≥n a reuni√≥n - ACTUALIZADA',
      contenido: 'Contenido actualizado para la reuni√≥n de seguimiento acad√©mico.',
      estado: 'Le√≠do'
    };
    
    const updateResponse = await api.put(`/comunicacion-familia/${nuevaComunicacion.id}`, updateData);
    console.log('‚úÖ Comunicaci√≥n actualizada:', updateResponse.data.message);

    // 6. Probar diferentes tipos de comunicaci√≥n
    console.log('\n6Ô∏è‚É£ Probando diferentes tipos de comunicaci√≥n...');
    const tiposComunicacion = [
      {
        ...testData,
        tipo_comunicacion: 'Informe Acad√©mico',
        asunto: 'Informe de rendimiento acad√©mico',
        contenido: 'Informe detallado del rendimiento acad√©mico del estudiante.',
        responsable_id: 3,
        enviar_email: false
      },
      {
        ...testData,
        tipo_comunicacion: 'Alerta/Urgente',
        asunto: 'Alerta de asistencia',
        contenido: 'El estudiante ha faltado a clases consecutivamente.',
        responsable_id: 3,
        enviar_email: false
      }
    ];

    for (const tipo of tiposComunicacion) {
      const tipoResponse = await api.post('/comunicacion-familia', tipo);
      console.log(`‚úÖ ${tipo.tipo_comunicacion} creada con ID: ${tipoResponse.data.comunicacion.id}`);
    }

    // 7. Probar eliminar comunicaci√≥n
    console.log('\n7Ô∏è‚É£ Probando eliminar comunicaci√≥n...');
    const deleteResponse = await api.delete(`/comunicacion-familia/${nuevaComunicacion.id}`);
    console.log('‚úÖ Comunicaci√≥n eliminada:', deleteResponse.data.message);

    console.log('\nüéâ ¬°Todas las pruebas pasaron exitosamente!');
    console.log('\nüìã Resumen de funcionalidades probadas:');
    console.log('   ‚úÖ Autenticaci√≥n con JWT');
    console.log('   ‚úÖ Obtener todas las comunicaciones');
    console.log('   ‚úÖ Obtener comunicaciones por estudiante');
    console.log('   ‚úÖ Crear nueva comunicaci√≥n');
    console.log('   ‚úÖ Obtener comunicaci√≥n por ID');
    console.log('   ‚úÖ Actualizar comunicaci√≥n');
    console.log('   ‚úÖ Eliminar comunicaci√≥n');
    console.log('   ‚úÖ Diferentes tipos de comunicaci√≥n');
    console.log('   ‚úÖ Validaci√≥n de datos con Joi');
    console.log('   ‚úÖ Middleware de seguridad');
    console.log('   ‚úÖ Env√≠o de emails (simulado en desarrollo)');

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\nüí° Nota: Token de autenticaci√≥n inv√°lido o expirado');
      console.log('   - Verifica las credenciales de login');
      console.log('   - El token puede haber expirado');
    }
    
    if (error.response?.status === 404) {
      console.log('\nüí° Nota: Recurso no encontrado');
      console.log('   - Verifica que el estudiante con ID existe');
      console.log('   - Verifica que la comunicaci√≥n existe');
    }
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Nota: El servidor backend no est√° ejecut√°ndose');
      console.log('   - Ejecuta: cd backend && node index.js');
    }
  }
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Iniciando pruebas del sistema SIGO - Comunicaci√≥n Familiar\n');
  
  // Intentar login
  const loginSuccess = await login();
  
  if (!loginSuccess) {
    console.log('\n‚ùå No se pudo autenticar. Verifica las credenciales.');
    console.log('üí° Credenciales actuales:', credentials);
    console.log('   - Cambia las credenciales en el script si es necesario');
    console.log('   - Verifica que el usuario existe en la base de datos');
    return;
  }
  
  // Ejecutar pruebas
  await testComunicacionFamilia();
}

// Ejecutar pruebas
main().catch(console.error);
