const model = require("../models/comunicacionFamiliaModel");
const logger = require("../utils/logger");
const { enviarCitacionReunion } = require("../utils/emailService");
const EstudianteModel = require("../models/estudianteModel");

const ComunicacionFamiliaController = {
  async crear(req, res, next) {
    try {
      const nuevaComunicacion = await model.crear(req.body);
      
      // Si es una citaci√≥n a reuni√≥n, enviar email al apoderado
      if (req.body.tipo_comunicacion === 'Citaci√≥n a Reuni√≥n' && req.body.enviar_email) {
        try {
          // Obtener datos del estudiante y apoderado
          const estudiante = await EstudianteModel.obtenerPorId(req.body.id_estudiante);
          
          if (estudiante && estudiante.email_apoderado) {
            await enviarCitacionReunion({
              to: estudiante.email_apoderado,
              apoderado: estudiante.nombre_apoderado || 'Apoderado',
              estudiante: `${estudiante.nombre} ${estudiante.apellido}`,
              fecha: req.body.fecha_comunicacion,
              hora: req.body.hora_reunion || 'Por confirmar',
              lugar: req.body.lugar_reunion || 'Liceo T√©cnico SIGO',
              motivo: req.body.asunto || 'Reuni√≥n de seguimiento acad√©mico',
              profesional: req.body.responsable_id || 'Orientador/a'
            });
            
            logger.info(`üìß Email de citaci√≥n enviado a: ${estudiante.email_apoderado}`);
          } else {
            logger.warn(`‚ö†Ô∏è No se pudo enviar email: estudiante sin email de apoderado`);
          }
        } catch (emailError) {
          logger.error("‚ùå Error enviando email de citaci√≥n:", emailError);
          // No fallar la operaci√≥n principal por error de email
        }
      }
      
      res.status(201).json({ 
        message: "‚úÖ Comunicaci√≥n registrada", 
        comunicacion: nuevaComunicacion 
      });
    } catch (err) {
      logger.error("‚ùå Error al registrar comunicaci√≥n: " + err.message);
      next(err);
    }
  },

  async obtenerTodos(req, res, next) {
    try {
      const { id_estudiante } = req.query;
      
      let datos;
      if (id_estudiante) {
        datos = await model.obtenerPorEstudiante(id_estudiante);
      } else {
        datos = await model.obtenerTodos();
      }
      
      res.json(datos);
    } catch (err) {
      logger.error("‚ùå Error al obtener comunicaciones: " + err.message);
      next(err);
    }
  },

  async obtenerPorId(req, res, next) {
    try {
      // El middleware ya verific√≥ que existe, usar los datos del request
      res.json(req.comunicacion);
    } catch (err) {
      logger.error("‚ùå Error al obtener comunicaci√≥n: " + err.message);
      next(err);
    }
  },

  async actualizar(req, res, next) {
    try {
      const comunicacionActualizada = await model.actualizar(req.params.id, req.body);
      
      // Si es una citaci√≥n a reuni√≥n y se solicita env√≠o por email
      if (req.body.tipo_comunicacion === 'Citaci√≥n a Reuni√≥n' && req.body.enviar_email) {
        try {
          const estudiante = await EstudianteModel.obtenerPorId(req.body.id_estudiante);
          
          if (estudiante && estudiante.email_apoderado) {
            await enviarCitacionReunion({
              to: estudiante.email_apoderado,
              apoderado: estudiante.nombre_apoderado || 'Apoderado',
              estudiante: `${estudiante.nombre} ${estudiante.apellido}`,
              fecha: req.body.fecha_comunicacion,
              hora: req.body.hora_reunion || 'Por confirmar',
              lugar: req.body.lugar_reunion || 'Liceo T√©cnico SIGO',
              motivo: req.body.asunto || 'Reuni√≥n de seguimiento acad√©mico',
              profesional: req.body.responsable_id || 'Orientador/a'
            });
            
            logger.info(`üìß Email de citaci√≥n actualizada enviado a: ${estudiante.email_apoderado}`);
          }
        } catch (emailError) {
          logger.error("‚ùå Error enviando email de citaci√≥n actualizada:", emailError);
        }
      }
      
      res.json({ 
        message: "‚úÖ Comunicaci√≥n actualizada", 
        comunicacion: comunicacionActualizada 
      });
    } catch (err) {
      logger.error("‚ùå Error al actualizar comunicaci√≥n: " + err.message);
      next(err);
    }
  },

  async eliminar(req, res, next) {
    try {
      const comunicacionEliminada = await model.eliminar(req.params.id);
      res.json({ 
        message: "üóëÔ∏è Comunicaci√≥n eliminada",
        comunicacion: comunicacionEliminada
      });
    } catch (err) {
      logger.error("‚ùå Error al eliminar comunicaci√≥n: " + err.message);
      next(err);
    }
  }
};

module.exports = ComunicacionFamiliaController;
