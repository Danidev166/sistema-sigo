const axios = require('axios');

const RENDER_BASE_URL = 'https://sistema-sigo.onrender.com/api';

async function testSpecificEndpoints() {
  console.log('üß™ Probando endpoints espec√≠ficos de reportes, movimientos y seguimiento...\n');
  
  const endpoints = [
    // Endpoints de reportes
    { name: 'Reportes Dashboard', url: '/reportes-mejorado/dashboard', method: 'GET' },
    { name: 'Reportes Generales', url: '/reportes', method: 'GET' },
    { name: 'Reportes Estudiantes', url: '/reportes/estudiantes', method: 'GET' },
    
    // Endpoints de movimientos
    { name: 'Movimientos Recursos', url: '/movimientos-recursos', method: 'GET' },
    { name: 'Entrega Recursos', url: '/entrega-recursos', method: 'GET' },
    
    // Endpoints de seguimiento psicosocial
    { name: 'Seguimiento Psicosocial', url: '/seguimiento-psicosocial', method: 'GET' },
    { name: 'Seguimiento Acad√©mico', url: '/seguimiento-academico', method: 'GET' },
    { name: 'Asistencia', url: '/asistencia', method: 'GET' },
    { name: 'Comunicaci√≥n Familia', url: '/comunicacion-familia', method: 'GET' },
    { name: 'Intervenciones', url: '/intervenciones', method: 'GET' },
    { name: 'Conducta', url: '/conducta', method: 'GET' },
    { name: 'Historial Acad√©mico', url: '/historial-academico', method: 'GET' },
    
    // Endpoints generales de seguimiento
    { name: 'Seguimiento General', url: '/seguimiento', method: 'GET' },
    { name: 'Seguimiento Cronol√≥gico', url: '/seguimiento-cronologico', method: 'GET' },
    { name: 'Plantillas Reportes', url: '/plantillas-reportes', method: 'GET' }
  ];
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const endpoint of endpoints) {
    try {
      console.log(`üìä Probando ${endpoint.name}...`);
      
      const response = await axios({
        method: endpoint.method,
        url: `${RENDER_BASE_URL}${endpoint.url}`,
        timeout: 10000,
        validateStatus: function (status) {
          return status < 500; // Aceptar 401, 404, etc. pero no 500
        }
      });
      
      if (response.status === 200) {
        console.log(`‚úÖ ${endpoint.name}: Status ${response.status} - üéâ Funcionando correctamente`);
        successCount++;
      } else if (response.status === 401) {
        console.log(`‚úÖ ${endpoint.name}: Status ${response.status} - üö´ Requiere autenticaci√≥n (normal)`);
        successCount++;
      } else if (response.status === 404) {
        console.log(`‚ö†Ô∏è ${endpoint.name}: Status ${response.status} - üîç Endpoint no encontrado`);
        errorCount++;
      } else {
        console.log(`‚ö†Ô∏è ${endpoint.name}: Status ${response.status} - ‚ö†Ô∏è Respuesta inesperada`);
        errorCount++;
      }
      
    } catch (error) {
      if (error.response) {
        if (error.response.status === 500) {
          console.log(`‚ùå ${endpoint.name}: Status ${error.response.status} - üí• Error interno del servidor`);
        } else {
          console.log(`‚ö†Ô∏è ${endpoint.name}: Status ${error.response.status} - ‚ö†Ô∏è Error: ${error.response.statusText}`);
        }
      } else {
        console.log(`‚ùå ${endpoint.name}: Error de conexi√≥n - ${error.message}`);
      }
      errorCount++;
    }
    
    // Peque√±a pausa entre requests
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log('\nüìä Resumen de pruebas:');
  console.log(`‚úÖ Exitosos: ${successCount}`);
  console.log(`‚ùå Errores: ${errorCount}`);
  console.log(`üìà Total: ${endpoints.length}`);
  
  if (errorCount === 0) {
    console.log('\nüéâ ¬°Todos los endpoints est√°n funcionando correctamente!');
    console.log('üí° Los errores 401 son normales - indican que requieren autenticaci√≥n');
  } else {
    console.log('\n‚ö†Ô∏è Algunos endpoints tienen problemas');
    console.log('üí° Revisa los logs del servidor para m√°s detalles');
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  testSpecificEndpoints()
    .then(() => {
      console.log('\n‚úÖ Pruebas completadas');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en las pruebas:', error.message);
      process.exit(1);
    });
}

module.exports = { testSpecificEndpoints };

