/**
 * Script de diagn√≥stico para recuperaci√≥n de contrase√±a
 * Prueba el flujo completo: env√≠o de c√≥digo y verificaci√≥n
 */

require('dotenv').config({ path: '.env.production' });
const axios = require('axios');

const API_BASE = 'http://localhost:3001/api';

async function testPasswordRecovery() {
  console.log('üîç Iniciando diagn√≥stico de recuperaci√≥n de contrase√±a...\n');
  
  // Email de prueba
  const testEmail = 'daniel1822@gmail.com';
  
  try {
    // 1. Probar env√≠o de c√≥digo
    console.log('üìß Paso 1: Enviando c√≥digo de recuperaci√≥n...');
    const recoveryResponse = await axios.post(`${API_BASE}/auth/recuperar`, {
      email: testEmail
    });
    
    console.log('‚úÖ Respuesta del servidor:', recoveryResponse.data);
    
    // 2. Simular verificaci√≥n (necesitar√≠as el c√≥digo real del email)
    console.log('\nüîë Paso 2: Simulando verificaci√≥n de c√≥digo...');
    console.log('‚ö†Ô∏è  Nota: Necesitas el c√≥digo real del email para completar esta prueba');
    
    // 3. Verificar configuraci√≥n de email
    console.log('\nüìã Configuraci√≥n de email:');
    console.log(`MAIL_HOST: ${process.env.MAIL_HOST}`);
    console.log(`MAIL_PORT: ${process.env.MAIL_PORT}`);
    console.log(`MAIL_USER: ${process.env.MAIL_USER}`);
    console.log(`MAIL_PASS: ${process.env.MAIL_PASS ? '***configurado***' : '‚ùå NO CONFIGURADO'}`);
    console.log(`NODE_ENV: ${process.env.NODE_ENV}`);
    
  } catch (error) {
    console.error('‚ùå Error en el diagn√≥stico:', error.response?.data || error.message);
    
    if (error.response?.status === 404) {
      console.log('\nüí° Posibles soluciones:');
      console.log('1. Verificar que el servidor est√© ejecut√°ndose');
      console.log('2. Verificar la URL de la API');
      console.log('3. Verificar que las rutas est√©n correctamente configuradas');
    }
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° El servidor no est√° ejecut√°ndose. Inicia el servidor con:');
      console.log('npm start');
    }
  }
}

async function testEmailConfiguration() {
  console.log('\nüîß Verificando configuraci√≥n de email...');
  
  const requiredVars = ['MAIL_HOST', 'MAIL_PORT', 'MAIL_USER', 'MAIL_PASS'];
  const missing = requiredVars.filter(varName => !process.env[varName]);
  
  if (missing.length > 0) {
    console.log('‚ùå Variables de email faltantes:', missing);
    return false;
  }
  
  console.log('‚úÖ Todas las variables de email est√°n configuradas');
  return true;
}

async function main() {
  console.log('üöÄ Diagn√≥stico de Sistema de Recuperaci√≥n de Contrase√±a\n');
  console.log('=' .repeat(60));
  
  // Verificar configuraci√≥n
  const emailConfigOk = await testEmailConfiguration();
  
  if (!emailConfigOk) {
    console.log('\n‚ùå No se puede continuar sin configuraci√≥n de email');
    return;
  }
  
  // Probar flujo de recuperaci√≥n
  await testPasswordRecovery();
  
  console.log('\n' + '=' .repeat(60));
  console.log('‚úÖ Diagn√≥stico completado');
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testPasswordRecovery, testEmailConfiguration };
