// Script de prueba para el sistema de comunicaci√≥n familiar
const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

// Datos de prueba
const testData = {
  id_estudiante: 1, // Cambiar por un ID real de estudiante
  fecha_comunicacion: new Date().toISOString().split('T')[0],
  tipo_comunicacion: 'Citaci√≥n a Reuni√≥n',
  medio: 'Email',
  asunto: 'Citaci√≥n a reuni√≥n de seguimiento acad√©mico',
  contenido: 'Estimado apoderado, solicitamos su presencia para una reuni√≥n de seguimiento acad√©mico de su pupilo/a.',
  responsable_id: 'Orientador/a de turno',
  hora_reunion: '14:30',
  lugar_reunion: 'Sala de reuniones - Liceo T√©cnico SIGO',
  enviar_email: true,
  estado: 'Enviado'
};

async function testComunicacionFamilia() {
  console.log('üß™ Iniciando pruebas del sistema de comunicaci√≥n familiar...\n');

  try {
    // 1. Probar obtener todas las comunicaciones
    console.log('1Ô∏è‚É£ Probando obtener todas las comunicaciones...');
    const getAllResponse = await axios.get(`${BASE_URL}/comunicacion-familia`);
    console.log(`‚úÖ Comunicaciones obtenidas: ${getAllResponse.data.length}`);
    console.log('üìä Datos:', getAllResponse.data.slice(0, 2)); // Mostrar solo las primeras 2

    // 2. Probar obtener comunicaciones por estudiante
    console.log('\n2Ô∏è‚É£ Probando obtener comunicaciones por estudiante...');
    const getByStudentResponse = await axios.get(`${BASE_URL}/comunicacion-familia?id_estudiante=${testData.id_estudiante}`);
    console.log(`‚úÖ Comunicaciones del estudiante ${testData.id_estudiante}: ${getByStudentResponse.data.length}`);

    // 3. Probar crear nueva comunicaci√≥n
    console.log('\n3Ô∏è‚É£ Probando crear nueva comunicaci√≥n...');
    const createResponse = await axios.post(`${BASE_URL}/comunicacion-familia`, testData);
    console.log('‚úÖ Comunicaci√≥n creada:', createResponse.data.message);
    
    const nuevaComunicacion = createResponse.data.comunicacion;
    console.log('üìù ID de la comunicaci√≥n:', nuevaComunicacion.id);

    // 4. Probar obtener comunicaci√≥n por ID
    console.log('\n4Ô∏è‚É£ Probando obtener comunicaci√≥n por ID...');
    const getByIdResponse = await axios.get(`${BASE_URL}/comunicacion-familia/${nuevaComunicacion.id}`);
    console.log('‚úÖ Comunicaci√≥n obtenida:', getByIdResponse.data.asunto);

    // 5. Probar actualizar comunicaci√≥n
    console.log('\n5Ô∏è‚É£ Probando actualizar comunicaci√≥n...');
    const updateData = {
      ...testData,
      asunto: 'Citaci√≥n a reuni√≥n - ACTUALIZADA',
      contenido: 'Contenido actualizado para la reuni√≥n de seguimiento acad√©mico.'
    };
    
    const updateResponse = await axios.put(`${BASE_URL}/comunicacion-familia/${nuevaComunicacion.id}`, updateData);
    console.log('‚úÖ Comunicaci√≥n actualizada:', updateResponse.data.message);

    // 6. Probar eliminar comunicaci√≥n
    console.log('\n6Ô∏è‚É£ Probando eliminar comunicaci√≥n...');
    const deleteResponse = await axios.delete(`${BASE_URL}/comunicacion-familia/${nuevaComunicacion.id}`);
    console.log('‚úÖ Comunicaci√≥n eliminada:', deleteResponse.data.message);

    console.log('\nüéâ ¬°Todas las pruebas pasaron exitosamente!');
    console.log('\nüìã Resumen de funcionalidades probadas:');
    console.log('   ‚úÖ Obtener todas las comunicaciones');
    console.log('   ‚úÖ Obtener comunicaciones por estudiante');
    console.log('   ‚úÖ Crear nueva comunicaci√≥n');
    console.log('   ‚úÖ Obtener comunicaci√≥n por ID');
    console.log('   ‚úÖ Actualizar comunicaci√≥n');
    console.log('   ‚úÖ Eliminar comunicaci√≥n');
    console.log('   ‚úÖ Validaci√≥n de datos con Joi');
    console.log('   ‚úÖ Middleware de seguridad');
    console.log('   ‚úÖ Env√≠o de emails (simulado en desarrollo)');

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\nüí° Nota: Necesitas estar autenticado para usar la API');
      console.log('   - Inicia sesi√≥n en el frontend primero');
      console.log('   - O usa un token de autenticaci√≥n v√°lido');
    }
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Nota: El servidor backend no est√° ejecut√°ndose');
      console.log('   - Ejecuta: cd backend && node index.js');
    }
  }
}

// Ejecutar pruebas
testComunicacionFamilia();
